{
  "name": "ralph",
  "fileTypes": ["sol"],
  "scopeName": "source.ral",
  "patterns": [
    { "include": "#comment" },
    { "include": "#keywords" },
    { "include": "#types" },
    { "include": "#global" },
    { "include": "#number" },
    { "include": "#constant" }
  ],
  "repository": {
    "comment": {
      "patterns": [
        {
          "include": "#comment-line"
        },
        {
          "include": "#comment-block"
        }
      ]
    },
    "comment-todo": {
      "match": "(?i)\\b(FIXME|TODO|CHANGED|XXX|IDEA|HACK|NOTE|REVIEW|NB|BUG|QUESTION|COMBAK|TEMP|SUPPRESS|LINT|\\w+-disable|\\w+-suppress)\\b(?-i)",
      "name": "keyword.comment.todo.ralph"
    },
    "comment-line": {
      "begin": "(?<!tp:)//",
      "end": "$",
      "name": "comment.line",
      "patterns": [
        {
          "include": "#comment-todo"
        }
      ]
    },
    "comment-block": {
      "begin": "/\\*",
      "end": "\\*/",
      "name": "comment.block",
      "patterns": [
        {
          "include": "#comment-todo"
        }
      ]
    },
    "operators": {
      "comment": "Note that the order here is very important!",
      "patterns": [
        {
          "match": "=",
          "name": "keyword.operator.assignment.ralph"
        },
        {
          "match": "\\+\\+",
          "name": "keyword.operator.concat.ralph"
        },
        {
          "match": "(\\+|\\-|\\*|/|%|⊕|`+`|⊖|`-`|⊗|`*`|<<|>>|&|\\^|\\|)",
          "name": "keyword.operator.arithmetic.ralph"
        },
        {
          "match": "(==|!=|<|<=|>|>=)",
          "name": "keyword.operator.test.ralph"
        },
        {
          "match": "(&&|\\|\\||!)",
          "name": "keyword.operator.logical.ralph"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.ralph",
          "match": "\\b(if|else|while|for|return)\\b"
        },
        {
          "match": "\\b(alph)\\b",
          "name": "keyword.alph.ralph"
        },
        {
          "match": "\\b(let|mut|const)\\b",
          "name": "keyword.let.ralph"
        },
        {
          "match": "\\b(fn|pub)\\b",
          "name": "keyword.function.ralph"
        },
        {
          "match": "\\b(extends|Abstract|implements)\\b",
          "name": "keyword.extends.ralph"
        },
        {
          "match": "\\b(Interface)\\b",
          "name": "keyword.Interface.ralph"
        },
        {
          "match": "\\b(event|emit)\\b",
          "name": "keyword.event.ralph"
        },
        {
          "match": "(@using|@unused)\\b",
          "name": "keyword.annotation.ralph"
        },
        {
          "match": "\\b(TxScript|TxContract|Contract|AssetScript|enum)\\b",
          "name": "keyword.struct.ralph"
        },
        { "include": "#operators" }
      ]
    },
    "types": {
      "patterns": [
        {
          "comment": "numeric types",
          "match": "(?<![A-Za-z])(Bool|I256|U256|Address|ByteVec)\\b",
          "captures": {
            "1": {
              "name": "support.type.primitive.ralph"
            }
          }
        }
      ]
    },
    "constant": {
      "match": "\\b(?:true|false)\\b",
      "name": "constant.language.ralph"
    },
    "number": {
      "patterns": [
        {
          "comment": "handles hexadecimal numbers",
          "match": "(0x)[0-9a-fA-f]*",
          "name": "constant.hex.numeric.ralph"
        },
        {
          "comment": "handles integer and decimal numbers",
          "match": "[+-.]?(?=[1-9]|0(?!\\d))\\d+(\\.\\d+)?([eE][+-]?\\d+)?",
          "name": "constant.dec.numeric.ralph"
        }
      ]
    },
    "global": {
      "patterns": [
        {
          "include": "#global-functions"
        }
      ]
    },
    "global-functions": {
      "patterns": [
        {
          "match": "\\w*?\\!",
          "name": "support.function.builtIn.ralph"
        }
      ]
    }
  }
}
