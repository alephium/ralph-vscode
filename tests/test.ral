import "sequence.ral"

TxContract Governance<undoneSequenceCodeHash: ByteVec, eventEmitterId: ByteVec>(
    chainId: U256,
    governanceChainId: U256,
    governanceContract: ByteVec,
    mut next: U256,
    mut next1: U256,
    mut next2: U256,
    mut undoneSequenceId: ByteVec,
    mut messageFee: U256,
    mut guardianSets: [[ByteVec; 19]; 2], // keep previous and current guardian set
    mut guardianSetIndexes: [U256; 2],
    mut guardianSetSizes: [U256; 2],
    mut previousGuardianSetExpirationTime: U256
) extends Sequence(next, next1, next2, undoneSequenceId) {
    pub fn getChainId() -> (U256) {
        return chainId
    }

    pub fn getMessageFee() -> (U256) {
        return messageFee
    }

    // TODO: contract upgrade

    pub payable fn payMessageFee(payer: Address) -> () {
        transferAlphToSelf!(payer, messageFee)
    }

    // return emitterChainId, emitterAddress, sequence, payload
    pub fn parseBody(body: ByteVec) -> (U256, ByteVec, U256, ByteVec) {
        let timestamp = u256From4Byte!(byteVecSlice!(body, 0, 4))
        let nonce = u256From4Byte!(byteVecSlice!(body, 4, 8))
        let emitterChainId = u256From2Byte!(byteVecSlice!(body, 8, 10))
        let emitterAddress = byteVecSlice!(body, 10, 42)
        let sequence = u256From8Byte!(byteVecSlice!(body, 42, 50))
        let consistencyLevel = u256From1Byte!(byteVecSlice!(body, 50, 51))
        let payload = byteVecSlice!(body, 51, size!(body))
        return emitterChainId, emitterAddress, sequence, payload
    }

    fn verifyGovernanceVAA(vaa: ByteVec) -> (ByteVec) {
        let body = parseAndVerifySignatures(vaa, true)
        let (emitterChainId, emitterAddress, msgSequence, payload) = parseBody(body)
        assert!(emitterChainId == governanceChainId)
        assert!(emitterAddress == governanceContract)
        checkSequence(msgSequence)
        return payload
    }

    pub fn parseAndVerifyVAA(vaa: ByteVec) -> (U256, ByteVec, U256, ByteVec) {
        let body = parseAndVerifySignatures(vaa, false)
        return parseBody(body)
    }

    // parse VAA and verify signatures, return body
    fn parseAndVerifySignatures(data: ByteVec, checkGuardianSetIndex: Bool) -> (ByteVec) {
        assert!(byteVecSlice!(data, 0, 1) == #01)
        let guardianSetIndex = u256From4Byte!(byteVecSlice!(data, 1, 5))
        if (checkGuardianSetIndex) {
            assert!(guardianSetIndex == guardianSetIndexes[1])
        }
        let signatureSize = u256From1Byte!(byteVecSlice!(data, 5, 6))
        assert!(signatureSize <= 19)
        let mut index = 6
        let mut signatures = [#00; 19]
        loop(0, 19, 1,
            // 1 byte `guardianIndex` and 65 bytes signature
            if (? == u256From1Byte!(byteVecSlice!(data, index, index + 1))) {
                signatures[?] = byteVecSlice!(data, index, index + 66)
                index = index + 66
            }
        )
        let body = byteVecSlice!(data, index, size!(data))
        let hash = keccak256!(keccak256!(body))
        verifySignatures(guardianSetIndex, hash, signatures, signatureSize)
        return body
    }

    fn checkModuleAndAction(payload: ByteVec, start: U256, action: ByteVec) -> () {
        let coreModule = #00000000000000000000000000000000000000000000000000000000436f7265
        assert!(byteVecSlice!(payload, start, start + 32) == coreModule)
        assert!(byteVecSlice!(payload, start + 32, start + 33) == action)
    }

    fn updatePreviousGuardianSet() -> () {
        guardianSets[0] = guardianSets[1]
        guardianSetIndexes[0] = guardianSetIndexes[1]
        guardianSetSizes[0] = guardianSetSizes[1]
        previousGuardianSetExpirationTime = blockTimeStamp!() + 86400000 // expired after one day
    }

    pub fn updateGuardianSet(vaa: ByteVec) -> () {
        updatePreviousGuardianSet()
        let payload = verifyGovernanceVAA(vaa)
        checkModuleAndAction(payload, 0, #02)
        let vaaChainId = u256From2Byte!(byteVecSlice!(payload, 33, 35))
        assert!(vaaChainId == chainId || vaaChainId == 0)
        let newGuardianSetIndex = u256From4Byte!(byteVecSlice!(payload, 35, 39))
        assert!(newGuardianSetIndex == guardianSetIndexes[1] + 1)
        let newGuardianSetSize = u256From1Byte!(byteVecSlice!(payload, 39, 40))
        assert!(newGuardianSetSize > 0 && newGuardianSetSize <= 19)
        let mut index = 40
        loop(0, 19, 1,
            if (? < newGuardianSetSize) {
                guardianSets[1][?] = byteVecSlice!(payload, index, index + 20)
                index = index + 20
            } else {
                guardianSets[1][?] = #00
            }
        )
        assert!(size!(payload) == index)
        guardianSetIndexes[1] = newGuardianSetIndex
        guardianSetSizes[1] = newGuardianSetSize
    }

    pub fn setMessageFee(vaa: ByteVec) -> () {
        let payload = verifyGovernanceVAA(vaa)
        checkModuleAndAction(payload, 0, #03)
        let vaaChainId = u256From2Byte!(byteVecSlice!(payload, 33, 35))
        assert!(vaaChainId == chainId)
        let fee = u256From32Byte!(byteVecSlice!(payload, 35, 67))
        assert!(size!(payload) == 67)
        messageFee = fee
    }

    pub payable fn submitTransferFee(vaa: ByteVec) -> () {
        let payload = verifyGovernanceVAA(vaa)
        checkModuleAndAction(payload, 0, #04)
        let vaaChainId = u256From2Byte!(byteVecSlice!(payload, 33, 35))
        assert!(vaaChainId == chainId || vaaChainId == 0)
        let amount = u256From32Byte!(byteVecSlice!(payload, 35, 67))
        let recipient = byteVecSlice!(payload, 67, 99)
        assert!(size!(payload) == 99)
        transferAlphFromSelf!(byteVecToAddress!(#00 ++ recipient), amount)
    }

    fn verifySignature(lastGuardianIndex: I256, signature: ByteVec, key: ByteVec, hash: ByteVec) -> I256 {
        if (signature == #00) {
            return lastGuardianIndex
        }
        let guardianIndex = i256!(u256From1Byte!(byteVecSlice!(signature, 0, 1)))
        assert!(guardianIndex > lastGuardianIndex)
        assert!(key == ethEcRecover!(hash, byteVecSlice!(signature, 1, 66)))
        return guardianIndex
    }

    fn verifySignatures(
        guardianSetIndex: U256,
        hash: ByteVec,
        signatures: [ByteVec; 19],
        signatureSize: U256
    ) -> () {
        let (keys, expirationTime, guardianSize) = getGuardiansInfo(guardianSetIndex)
        if (guardianSetIndex != guardianSetIndexes[1] && blockTimeStamp!() > expirationTime) {
            assert!(false)
        }
        // check signature quorum size
        assert!((guardianSize * 10 / 3) * 2 / 10 + 1 <= signatureSize)

        let mut lastGuardianIndex = -1i
        loop(0, 19, 1, lastGuardianIndex = verifySignature(lastGuardianIndex, signatures[?], keys[?], hash))
    }

    fn getGuardiansInfo(guardianSetIndex: U256) -> ([ByteVec; 19], U256, U256) {
        if (guardianSetIndex == guardianSetIndexes[1]) {
            return guardianSets[1], 0, guardianSetSizes[1]
        }
        if (guardianSetIndex == guardianSetIndexes[0]) {
            return guardianSets[0], previousGuardianSetExpirationTime, guardianSetSizes[0]
        }
        return [#00; 19], 0, 0
    }
}


isCalledFromTxScript!(
    
)


while () {

}

